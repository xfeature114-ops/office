Sub FillSheetsFromInput_BySectionName_Selective()
    Dim sourceWS As Worksheet
    Dim lastInputRow As Long, sectionCol As Long: sectionCol = 2
    Dim r As Long, rowStart As Long, rowEnd As Long
    Dim inputHeaderRow As Long: inputHeaderRow = 2
    Dim targetHeaderRow As Long: targetHeaderRow = 1
    Dim lastInputCol As Long
    Dim inputHeaders As Object
    Dim targetHeadersCols() As Variant
    Dim tgtCol As Long, srcCol As Long, tgtLastCol As Long
    Dim sectionToSheet As Object
    Dim alwaysCopySheets As Object
    Dim tgtSheetName As Variant ' declared as Variant since used in For Each
    Dim targetWS As Worksheet
    Dim shtNames As Variant
    Dim currentSectionName As String, currentSectionNameLower As String
    Dim lastTargetRow As Long
    Dim pasteRow As Long
    Dim i As Long

    ' SPEED UP
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False

    Set sourceWS = ThisWorkbook.Sheets("Input")

    lastInputRow = sourceWS.Cells(sourceWS.Rows.Count, sectionCol).End(xlUp).Row
    lastInputCol = sourceWS.Cells(inputHeaderRow, sourceWS.Columns.Count).End(xlToLeft).Column

    ' Mapping: Section header text (lowercase) -> output sheet names
    Set sectionToSheet = CreateObject("Scripting.Dictionary")
    With sectionToSheet
        .Add LCase("Quote preparation"), "Quote Preparation"
        .Add LCase("Quote review & submission"), "Quote Review"
        .Add LCase("CBOM"), "CBOM" ' Adjust/Clear if you don't use
    End With

    ' These sheets should always be copied even if not explicitly mapped
    Set alwaysCopySheets = CreateObject("Scripting.Dictionary")
    alwaysCopySheets.Add LCase("Organise"), True
    alwaysCopySheets.Add LCase("Scrub BOM"), True
    alwaysCopySheets.Add LCase("KOM"), True

    ' Collect all sheet names to clear below header before processing
    Dim clearSheetsColl As Object
    Set clearSheetsColl = CreateObject("Scripting.Dictionary")

    ' Add alwaysCopySheets keys to collection
    For Each tgtSheetName In alwaysCopySheets.Keys
        clearSheetsColl(tgtSheetName) = True
    Next tgtSheetName
    
    ' Add mapped sheets for other section headers
    For Each tgtSheetName In sectionToSheet.Items
        clearSheetsColl(LCase(tgtSheetName)) = True
    Next tgtSheetName

    ' Clear old data below header row for all these sheets
    Dim sheetNameToClear As Variant
    For Each sheetNameToClear In clearSheetsColl.Keys
        On Error Resume Next
        Set targetWS = ThisWorkbook.Sheets(sheetNameToClear)
        If Not targetWS Is Nothing Then
            targetWS.Rows(targetHeaderRow + 1 & ":" & targetWS.Rows.Count).ClearContents
        End If
        On Error GoTo 0
    Next sheetNameToClear

    ' Build dictionary of Input headers for case-insensitive matching
    Set inputHeaders = CreateObject("Scripting.Dictionary")
    For srcCol = 1 To lastInputCol
        Dim hdr As String
        hdr = Trim(sourceWS.Cells(inputHeaderRow, srcCol).Value)
        If hdr <> "" Then
            inputHeaders(UCase(hdr)) = srcCol
        End If
    Next srcCol

    ' Dictionary to hold header mappings for target sheets (sheet name -> array mapping target col ? Input col)
    Dim headerMappings As Object
    Set headerMappings = CreateObject("Scripting.Dictionary")

    ' Process Input sheet row by row starting after headers
    r = inputHeaderRow + 1
    Do While r <= lastInputRow
        currentSectionName = Trim(sourceWS.Cells(r, sectionCol).Value)
        currentSectionNameLower = LCase(currentSectionName)

        ' Check if this row is a section header (non-empty and not subtotal)
        If currentSectionName <> "" And Not currentSectionNameLower Like "*subtotal*" Then
            rowStart = r

            ' Find rowEnd of this section (up to before next subtotal or new section header)
            rowEnd = rowStart
            Do While rowEnd <= lastInputRow
                Dim nextVal As String
                nextVal = Trim(sourceWS.Cells(rowEnd, sectionCol).Value)
                If rowEnd > rowStart Then
                    If nextVal <> "" Then
                        If LCase(nextVal) Like "*subtotal*" Or nextVal <> currentSectionName Then
                            rowEnd = rowEnd - 1
                            Exit Do
                        End If
                    End If
                End If
                rowEnd = rowEnd + 1
            Loop
            If rowEnd > lastInputRow Then rowEnd = lastInputRow

            ' Decide which sheet to copy this section to
            If alwaysCopySheets.Exists(currentSectionNameLower) Then
                ' For Organise, Scrub BOM, KOM - copy without consulting mapping
                tgtSheetName = currentSectionName ' exact name expected as sheet name

                On Error Resume Next
                Set targetWS = ThisWorkbook.Sheets(tgtSheetName)
                On Error GoTo 0

                If targetWS Is Nothing Then
                    MsgBox "Sheet '" & tgtSheetName & "' not found for section '" & currentSectionName & "'. Section skipped.", vbExclamation
                    r = rowEnd + 1
                    GoTo ContinueLoop
                End If

            ElseIf sectionToSheet.Exists(currentSectionNameLower) Then
                tgtSheetName = sectionToSheet(currentSectionNameLower)

                On Error Resume Next
                Set targetWS = ThisWorkbook.Sheets(tgtSheetName)
                On Error GoTo 0

                If targetWS Is Nothing Then
                    MsgBox "Sheet '" & tgtSheetName & "' not found for section '" & currentSectionName & "'. Section skipped.", vbExclamation
                    r = rowEnd + 1
                    GoTo ContinueLoop
                End If

            Else
                ' Section header has no matching sheet and is not in always copy list: skip section
                r = rowEnd + 1
                GoTo ContinueLoop
            End If

            ' Build header mapping for this sheet if not already done
            If Not headerMappings.Exists(tgtSheetName) Then
                Dim tgtLastCol_Local As Long
                tgtLastCol_Local = targetWS.Cells(targetHeaderRow, targetWS.Columns.Count).End(xlToLeft).Column
                ReDim targetHeadersCols(1 To tgtLastCol_Local)

                For tgtCol = 1 To tgtLastCol_Local
                    Dim tgtHdr As String
                    tgtHdr = Trim(targetWS.Cells(targetHeaderRow, tgtCol).Value)
                    If tgtHdr <> "" And inputHeaders.Exists(UCase(tgtHdr)) Then
                        targetHeadersCols(tgtCol) = inputHeaders(UCase(tgtHdr))
                    Else
                        targetHeadersCols(tgtCol) = 0
                    End If
                Next tgtCol

                headerMappings.Add tgtSheetName, targetHeadersCols
            Else
                targetHeadersCols = headerMappings(tgtSheetName)
                tgtLastCol_Local = UBound(targetHeadersCols)
            End If

            ' Find last row to paste data in target sheet
            lastTargetRow = targetWS.Cells(targetWS.Rows.Count, 1).End(xlUp).Row
            If lastTargetRow < targetHeaderRow Then lastTargetRow = targetHeaderRow

            ' Copy all rows from this section to the target sheet
            For i = rowStart To rowEnd
                pasteRow = lastTargetRow + 1
                For tgtCol = 1 To tgtLastCol_Local
                    srcCol = targetHeadersCols(tgtCol)
                    If srcCol > 0 Then
                        targetWS.Cells(pasteRow, tgtCol).Value = sourceWS.Cells(i, srcCol).Value
                    End If
                Next tgtCol
                lastTargetRow = pasteRow
            Next i

            r = rowEnd + 1
        Else
            r = r + 1
        End If
ContinueLoop:
    Loop

    ' RESTORE EXCEL SETTINGS
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True

    MsgBox "Data successfully copied to sheets based on section headers.", vbInformation
End Sub


